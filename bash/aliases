# Must be loaded after $PAGER is set

# Prompt before removing a file
alias rm="rm -i"

if [ -f /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl ]; then
#  alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
  SUBLIME_TEXT_BIN="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
elif [ -f /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl ]; then
#  alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"
  SUBLIME_TEXT_BIN="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"
fi

subl() {
  args="${@}"
#  if [ ! -z "$args" -a "$args"!="." ]; then
  if [ ! -z "$args" -a "${args}" != "." ]; then
    echo "We have an argument:${args}: - 1"
    eval $SUBLIME_TEXT_BIN "$args"
  else
    if [ "${args}" == "." ]; then
      echo "We have an argument:${args}: - 2c"
      echo "The argument is '.' which is rarely desired. Just call with no argument."
    else
      echo "No argument supplied"
    fi
    SUBLIME_PROJECT_FILES=`ls -1 *.sublime-project 2> /dev/null`

    if [ "$SUBLIME_PROJECT_FILES" ]; then  # At least one project exists in current folder, open them all
      for SUBLIME_PROJECT_FILE in "$SUBLIME_PROJECT_FILES"; do
        echo "Using project file: ${SUBLIME_PROJECT_FILE}"
        eval $SUBLIME_TEXT_BIN --project "$SUBLIME_PROJECT_FILE"
      done
    else  # no file specified and no projects available so open current directory
      echo "No project file found. Opening current directory."
      eval $SUBLIME_TEXT_BIN .
    fi
  fi
}




# git aliases
alias git-email-ls="git config user.email dan.rabinowitz@livingsocial.com && git commit --amend --reset-author"
alias gca='GIT_COMMITTER_DATE="`date`" git commit --amend --date="$(date)" -C HEAD'
alias gl='git l'
alias gs='git s'
alias ga='git a'

alias man='man -P less'

# Ruby and Rails
#real_rails=`which rails`
#rails() {
#    args="$@"
#    if [ "$1" == "db" ]; then
#        args="$args --include-password"
#        echo "Running rails db with --include-password appended"
#    fi
#    "$real_rails" $args
#}
#alias r=rails

rails() {
  args="$@"
  real_rails=`which rails`
  cmd=$real_rails
  if [ -e "bin/rails" ]; then
    cmd="bin/rails"
  fi
  "$cmd" $args
}
alias rc='rails c'

rake() {
  args="$@"
  real_rake=`which rake`
  cmd=$real_rake
  if [ -e "bin/rake" ]; then
    cmd="bin/rake"
  fi
  "$cmd" $args
}

rspec() {
  args="$@"
  real_rspec=`which rspec`
  cmd=$real_rspec
  if [ -e "bin/rspec" ]; then
    cmd="bin/rspec"
  fi
  "$cmd" $args
}

alias be="bundle exec"
alias bi="bundle install"
#alias bil=bi

# disk usage with human sizes and minimal depth
alias du1='du -h --max-depth=1'

# Usage: pls [<var>]
# List path entries of PATH or environment variable <var>.
pls () { eval echo \$${1:-PATH} |tr : '\n'; }

# I don't think I'm using this. Comment out on 12/15/12, and delete after Jan 1 2014 if unused.
# use gem-man(1) if available:
#man () {
#    gem man -s "$@" 2>/dev/null ||
#    command man "$@"
#}

# SSH key management
# TODO: DRY this up. Or delete.
# push SSH public key to another box
push_VHG_ssh_cert() {
    local _host
    key_pub='/Volumes/VHG-Dan/dot/ssh/id_dsa.pub'
    for _host in "$@";
    do
        echo $_host
        ssh $_host 'mkdir -p .ssh;cat >> ~/.ssh/authorized_keys' < $key_pub
    done
}

push_USM_ssh_cert() {
    local _host
    key_pub='/Volumes/USM-Dan/dot/ssh/id_dsa.pub'
    for _host in "$@";
    do
        echo $_host
        ssh $_host 'mkdir -p .ssh;cat >> ~/.ssh/authorized_keys' < $key_pub
    done
}

# This is crap. Delete it.
set_iterm_bgcolor () {
   local R=$1
   local G=$2
   local B=$3
   /usr/bin/osascript <<EOF
tell application "iTerm"
    tell the first terminal
        tell the current session
            set background color to {$(($R*65535/255)), $(($G*65535/255)), $(($B*65535/255))}
        end tell
    end tell
end tell
EOF
}

function notify_branches_which_are_behind {
    mdfind -onlyin ~ '(kMDItemFSName = ".git" )'|grep -v -e '/Users/danrabinowitz/.rvm' -e '/Users/danrabinowitz/.Trash' -e '/Users/danrabinowitz/.sbt/staging/' | while read gitdir; do repodir=$(echo $gitdir | sed 's/\/.git$//') && (cd "$repodir" >& /dev/null && git fetch >& /dev/null && (git status 2>/dev/null | grep -c '^# Your branch is behind' >& /dev/null)) && (echo "NOTICE: $repodir is behind" | growlnotify -s) ; done
}

alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

alias nomorebundleexec='gem install rubygems-bundler && gem regenerate_binstubs'

# From: https://coderwall.com/p/o5ewia
alias reinstallnokogiri='gem install nokogiri -- --with-xml2-dir=/usr --with-xslt-dir=/opt/local --with-iconv-dir=/opt/local'

# From: https://twitter.com/kntreadway/status/390531943260909568
function conflicts { subl -n `git diff --name-only --diff-filter=U | tr "\\n" " "`; }

# Disabled aliases
# alias fn='find . -name'
# alias hi='history | tail -20'

if [ $(uname) = "Darwin" ]; then
#  alias dns="sudo /usr/bin/killall -HUP mDNSResponder"
  alias dns="sudo discoveryutil mdnsflushcache;sudo discoveryutil udnsflushcaches"
fi

alias fs="foreman start"

# Awesome tip for Mac OS X, thanks to Eric Harrison.
# Fix for camera not found
alias fix_cam='sudo killall VDCAssistant'

alias ssh="sshrc"

# From Sam Phippen: https://github.com/samphippen/dotfiles/blob/7ef2087e76d951b86623b5f7c13f00d77ab05931/bash/bash_profile.symlink#L179-L202
projswitch() {
    BASE=$2
    if [ -z "$3" ]
    then
        clear
        builtin cd $BASE && builtin cd $(find . -type d -maxdepth $1 | grep -v "\.git" | selecta)
        cd .
        clear
        clear
        ls
    else
        builtin cd $BASE/$3
    fi
}

dop() {
    projswitch 2 "$HOME/code/DigitalOcean/" $1
}

# The following 3 lines, which must be near the END of the file, tell Emacs to use sh mode for this file
# Local Variables:
# mode: sh
# End:
