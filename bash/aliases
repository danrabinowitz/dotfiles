# Must be loaded after $PAGER is set

# Prompt before removing a file
alias rm="rm -i"

if [ -f /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl ]; then
  alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
elif [ -f /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl ]; then
  alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"
fi

# git aliases
alias git-email-ls="git config user.email dan.rabinowitz@livingsocial.com && git commit --amend --reset-author"
alias gca='GIT_COMMITTER_DATE="`date`" git commit --amend --date="$(date)" -C HEAD'
alias gl='git l'
alias gs='git s'
alias ga='git a'

alias man='man -P less'

# Ruby and Rails
#real_rails=`which rails`
#rails() {
#    args="$@"
#    if [ "$1" == "db" ]; then
#        args="$args --include-password"
#        echo "Running rails db with --include-password appended"
#    fi
#    "$real_rails" $args
#}
#alias r=rails

function rails_console {
  function set_rails_command_for_dir {
    local dir=$1
#    echo "Changing to ${dir}"
    cd $dir
    if [ -e "bin/rails" ]; then
      # echo "Found script/console"
      rails_command_for_dir="bin/rails c"
      return 0
    fi
    if [ -e "script/console" ]; then
      # echo "Found script/console"
      rails_command_for_dir="script/console"
      return 0
    fi
    if [ -e "script/rails" ]; then
      # echo "Found script/rails"
      rails_command_for_dir="script/rails c"
      return 0
    fi


    if [[ $dir == "/" ]]; then
      rails_command_for_dir="irb"
      return 0
    fi
    local new_dir=$(dirname `pwd`)
    set_rails_command_for_dir $new_dir
    return $?
  }
  local rails_command_for_dir=""
  pushd . >& /dev/null
  set_rails_command_for_dir `pwd`
  echo "Running "$rails_command_for_dir
  $rails_command_for_dir
  popd >& /dev/null
}

alias rc=rails_console

alias bil="bundle install --local || bundle install"

# disk usage with human sizes and minimal depth
alias du1='du -h --max-depth=1'

# Usage: pls [<var>]
# List path entries of PATH or environment variable <var>.
pls () { eval echo \$${1:-PATH} |tr : '\n'; }

# I don't think I'm using this. Comment out on 12/15/12, and delete after Jan 1 2014 if unused.
# use gem-man(1) if available:
#man () {
#    gem man -s "$@" 2>/dev/null ||
#    command man "$@"
#}

# SSH key management
# TODO: DRY this up. Or delete.
# push SSH public key to another box
push_VHG_ssh_cert() {
    local _host
    key_pub='/Volumes/VHG-Dan/dot/ssh/id_dsa.pub'
    for _host in "$@";
    do
        echo $_host
        ssh $_host 'mkdir -p .ssh;cat >> ~/.ssh/authorized_keys' < $key_pub
    done
}

push_USM_ssh_cert() {
    local _host
    key_pub='/Volumes/USM-Dan/dot/ssh/id_dsa.pub'
    for _host in "$@";
    do
        echo $_host
        ssh $_host 'mkdir -p .ssh;cat >> ~/.ssh/authorized_keys' < $key_pub
    done
}

# This is crap. Delete it.
set_iterm_bgcolor () {
   local R=$1
   local G=$2
   local B=$3
   /usr/bin/osascript <<EOF
tell application "iTerm"
    tell the first terminal
        tell the current session
            set background color to {$(($R*65535/255)), $(($G*65535/255)), $(($B*65535/255))}
        end tell
    end tell
end tell
EOF
}

function notify_branches_which_are_behind {
    mdfind -onlyin ~ '(kMDItemFSName = ".git" )'|grep -v -e '/Users/danrabinowitz/.rvm' -e '/Users/danrabinowitz/.Trash' -e '/Users/danrabinowitz/.sbt/staging/' | while read gitdir; do repodir=$(echo $gitdir | sed 's/\/.git$//') && (cd "$repodir" >& /dev/null && git fetch >& /dev/null && (git status 2>/dev/null | grep -c '^# Your branch is behind' >& /dev/null)) && (echo "NOTICE: $repodir is behind" | growlnotify -s) ; done
}

alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

alias nomorebundleexec='gem install rubygems-bundler && gem regenerate_binstubs'

# From: https://coderwall.com/p/o5ewia
alias reinstallnokogiri='gem install nokogiri -- --with-xml2-dir=/usr --with-xslt-dir=/opt/local --with-iconv-dir=/opt/local'

# From: https://twitter.com/kntreadway/status/390531943260909568
function conflicts { subl -n `git diff --name-only --diff-filter=U | tr "\\n" " "`; }

# Disabled aliases
# alias fn='find . -name'
# alias hi='history | tail -20'

if [ $(uname) = "Darwin" ]; then
  alias dns="sudo /usr/bin/killall -HUP mDNSResponder"
fi



# The following 3 lines, which must be near the END of the file, tell Emacs to use sh mode for this file
# Local Variables:
# mode: sh
# End:
