[user]
  name = Dan Rabinowitz
	useConfigOnly = true
#  email = djr@danielrabinowitz.com
[color]
#  ui = true
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
  upstream = bold blue
  plain = normal
[color "diff"]
  plain = normal
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  commit = yellow
  whitespace = normal red
[color "status"]
    header = normal
    added = green
    updated = green
    changed = yellow
    untracked = red
    nobranch = red reverse
[color "grep"]
       match = normal
[color "interactive"]
       prompt = normal
       header = normal
       help = normal
       error = normal
       diffFilter = delta --color-only
# Colors: http://shallowsky.com/blog/programming/gitcolors.html
[format]
  pretty = oneline2
#  pretty = format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset - %Cred%G?%Creset
#  pretty = format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
#  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an <%ae>]%Creset
#  pretty = format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'

[delta]
    navigate = true    # use n and N to move between diff sections
	light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	line-numbers = true
	map-styles = bold purple => syntax magenta, bold cyan => syntax blue


[core]
  autocrlf = false
  editor = vim
  excludesfile = ~/.gitignore_global
  # whitespace issues which are enabled by default: blank-at-eol,blank-at-eof,space-before-tab
  whitespace = fix,-indent-with-non-tab,cr-at-eol
#  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
#  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  pager = delta
#  pager = less -FRSX
  # pager = diff-so-fancy | less --tabs=4 -RFX

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false
	attributesfile = /Users/djr/.gitattributes

[apply]
  whitespace = fix
[alias]
  d = diff
  s = status
  a = !git add -A . && git status
  c = commit
  cm = commit -m
#  cam = commit -a -m
#  cav = commit -a --verbose

  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
  staged = diff --cached
  l = log --pretty=oneline4 --abbrev-commit --graph --decorate

  # This is slow
  # log3b=log --abbrev-commit --graph --decorate
  # This is fast
  # log3b=log --pretty=oneline --abbrev-commit --graph --decorate

#  log1 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  log1 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  fastlog = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

  log10 = log --pretty=oneline --abbrev-commit --graph --decorate
  log11 = log --pretty=oneline2 --abbrev-commit --graph --decorate
  # --date={relative,local,default,iso,rfc}
#  log12 = log --pretty=oneline2 --abbrev-commit --graph --decorate --date=local

# Next line is from: http://stackoverflow.com/questions/15316601/is-git-pull-the-least-problematic-way-of-updating-a-git-repository/15316602#15316602
  up-all = "!git remote update -p; git merge --ff-only @{u}" # This version updates ALL Remotes
  up = "!git fetch -p; git merge --ff-only @{u}"          # This version updates only the default remote
  ss = "!git show $(git stash list | cut -d":" -f 1)"     # show stash

  edjr = "!git config user.email djr@danielrabinowitz.com; git commit --amend --reset-author"

  contributors = shortlog --summary --numbered

# From Greg Vaughn: Now you can "git copr #{pr_number}" (check out pr is the mnemonic) and it will
# pull down the PR in a local branch of pr-#{pr_number} and check it out for you.
  copr = "!f() { git fetch -fu origin refs/pull/$1/head:pr-$1; git checkout pr-$1; } ; f"
# From Greg Vaughn: And if you use "git copr N" regularly, you're going to end up with a bunch
# of pr-* local branches, so "git prunepr" will get rid of them for you.
  prunepr = "!git for-each-ref refs/heads/pr-* --format='%(refname:short)' | while read ref ; do git branch -D $ref ; done"

# From David Dreggors: Show the info about the last commit on each local branch
# Not using. The one from ultrasaurus below is much better
#  bb = !git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'

# From: https://twitter.com/ultrasaurus/status/635132951752126464
#  branches = for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/heads
# Tweaking the one fro ultasaurus to include stuff from @vgough
  branches = for-each-ref --sort='-authordate:iso8601' --format='%(HEAD) %(color:green)%(authordate:relative)%09%(color:yellow)%(refname:short)%(color:reset) - %(contents:subject)' refs/heads

  cleanbranches = !~/bin/gitcleanbranches.sh



# I do not use these aliases, but others with whom I pair might use them.
  st = status
  di = diff
  co = checkout
  ci = commit
#  br = branch
  cp = cherry-pick
  rb = rebase
  # From @vgough
  br = for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'




# More I do not generally use
  ap=add -p
  dc = diff --cached
  ds = diff --stat
  log2=log --pretty
  log3=log --pretty=oneline --abbrev-commit --graph --decorate
  log4=log --pretty --graph --decorate
  log5=log --pretty=oneline -n 20 --graph --abbrev-commit

  prune = fetch --prune


#[push]
#  default = current
#[github]
#  user = danrabinowitz
[push]
	default = current
	autoSetupRemote = true
[pull]
	rebase = true
	ff = only
[merge]
	ff = false
	conflictstyle = diff3
[diff]
	algorithm = patience
	renames = copies
	compactionHeuristic = true
	colorMoved = default
[pretty]
	oneline2 = format:"%C(auto)%h%d %s %C(cyan)(%ci)%Creset %C(yellow)<%an%GS>%Creset"
  oneline3 = format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"
  oneline4 = format:"%C(auto)%h%Creset%C(auto)%d%Creset %s %C(cyan)(%ai) %C(yellow)<%an>%Creset"
[commit]
  gpgsign = false

[url "git@github.internal.digitalocean.com:"]
        insteadOf = git://github.internal.digitalocean.com/
        insteadOf = https://github.internal.digitalocean.com/
        insteadOf = http://github.internal.digitalocean.com/
[url "git@github.com:"]
        insteadOf = git://github.com/
        insteadOf = https://github.com/
        insteadOf = http://github.com/

; include for all repositories inside ~/code/danrabinowitz/
[includeIf "gitdir:~/code/src/danrabinowitz/"]
  path = ~/code/src/danrabinowitz/.gitconfig.inc
[includeIf "gitdir:~/code/src/github.com/"]
  path = ~/code/src/danrabinowitz/.gitconfig.inc
[includeIf "gitdir:~/code/src/USM-Portal/"]
  path = ~/code/src/danrabinowitz/.gitconfig.inc
[includeIf "gitdir:~/code/src/VIC/"]
  path = ~/code/src/danrabinowitz/.gitconfig.inc

; include for all repositories inside ~/code/DigitalOcean/
[includeIf "gitdir:~/code/src/DigitalOcean/"]
  path = ~/code/src/DigitalOcean/.gitconfig.inc

; Disable log --graph in large repos
;[includeIf "gitdir:~/code/src/DigitalOcean/chef/"]
;  path = ~/.gitconfig.no-graph.inc
;[includeIf "gitdir:~/code/src/DigitalOcean/cthulhu/"]
;  path = ~/.gitconfig.no-graph.inc
;[includeIf "gitdir:~/code/src/DigitalOcean/atlantis/"]
;  path = ~/.gitconfig.no-graph.inc
[interactive]
	singlekey = true

[include]
	path = ~/.gitconfig_local
[transfer]
	fsckobjects = true
[init]
	defaultBranch = main
[maintenance]
	repo = /Users/djr/code/src/DigitalOcean/cthulhu
[scalar]
	repo = /Users/djr/code/src/DigitalOcean/cthulhu
